{
	"info": {
		"_postman_id": "2fd479dc-321b-4035-8c40-08d5d1b68bb5",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Check string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var Bashmachok = JSON.parse (responseBody);",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(Bashmachok.name).to.eql(\"Vitya\");",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(parseInt(Bashmachok.age)).to.eql(24);",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(Bashmachok.salary).to.eql(50000);",
							"});",
							"",
							"//7. Спарсить request.",
							"var Pirozhok = request.data;",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name=request\", function () {",
							"    pm.expect(Pirozhok.name).to.eql(Bashmachok.name);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age=request\", function () {",
							"    pm.expect(parseInt (Pirozhok.age)).to.eql(parseInt(Bashmachok.age));",
							"});",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary=request\", function () {",
							"    pm.expect(parseInt (Pirozhok.salary)).to.eql(Bashmachok.salary);",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"let resp_family = Bashmachok.family",
							"console.log (resp_family)",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Check u_salary\", function () {",
							"    pm.expect(resp_family.u_salary_1_5_year).to.eql(Bashmachok.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vitya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var Yogurt = JSON.parse(responseBody)",
							"",
							"//4. Спарсить request.",
							"var Tvorog = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(Yogurt.name).to.eql(pm.request.url.query.get(\"name\"));",
							"});",
							"",
							"pm.test(\"Check name2\", function () {",
							"    pm.expect(Yogurt.name).to.eql(Tvorog.name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(Yogurt.age).to.eql(Tvorog.age);",
							"});",
							"",
							"pm.test(\"Check age2\", function () {",
							"    pm.expect(Yogurt.age).to.eql(pm.request.url.query.get(\"age\"));",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(JSON.stringify(Yogurt.salary)).to.eql(Tvorog.salary);",
							"});",
							"",
							"pm.test(\"Check salary2\", function () {",
							"    pm.expect(JSON.stringify(Yogurt.salary)).to.eql(pm.request.url.query.get(\"salary\"));",
							"})",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"let resp_family = Yogurt.family",
							"console.log(resp_family)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has name\", function () {",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has age\", function () {",
							"    pm.expect(resp_family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Name = Luky\", function () {",
							"    pm.expect(resp_family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Age = 4\", function () {",
							"    pm.expect(resp_family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Lera&age=29&salary=70000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lera"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var Mama = JSON.parse(responseBody)",
							"",
							"//4. Спарсить request.",
							"var Parent = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(Mama.name).to.eql(Parent.name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(Mama.age).to.eql(parseInt(Parent.age));",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"console.log(Parent.salary)",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"console.log(Mama.salary)",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(Mama.salary[0])",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(Mama.salary[1])",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(Mama.salary[2])",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Salary0 = expected\", function () {",
							"    pm.expect(Mama.salary[0]).to.eql(parseInt(Parent.salary));",
							"});",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Salary1 = expected\", function () {",
							"    pm.expect(parseInt(Mama.salary[1])).to.eql(Parent.salary * 2);",
							"});",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Salary2 = expected\", function () {",
							"    pm.expect(parseInt(Mama.salary[2])).to.eql(Parent.salary * 3);",
							"});",
							"",
							"//18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", Parent.name);",
							"",
							"//19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", Parent.age);",
							"",
							"//20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", Parent.salary);",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let counter = 0; counter < Mama.salary.length; counter = counter + 1){",
							"    console.log(\"salary = \" + Mama.salary [counter]);}",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Frida&age=45&salary=70000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Frida"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//6. Спарсить response body в json.",
							"var Response = pm.response.json();",
							"",
							"//7. Спарсить request.",
							"var Request = request.data;",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check start salary\", function () {",
							"    pm.expect(Response).to.have.property(\"start_qa_salary\");",
							"    });",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Check salary 6\", function () {",
							"    pm.expect(Response).to.have.property(\"qa_salary_after_6_months\");",
							"    });  ",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Check salary 12\", function () {",
							"    pm.expect(Response).to.have.property(\"qa_salary_after_12_months\");",
							"    });  ",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Check salary 1,5\", function () {",
							"    pm.expect(Response).to.have.property(\"qa_salary_after_1.5_year\");",
							"    }); ",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Check salary 3,5\", function () {",
							"    pm.expect(Response).to.have.property(\"qa_salary_after_3.5_years\");",
							"    });",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Check person\", function () {",
							"    pm.expect(Response).to.have.property(\"person\");",
							"    });",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Salary = start\", function () {",
							"    pm.expect(Response.start_qa_salary).to.eql(parseInt(Request.salary));",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Salary = 6 months\", function () {",
							"    pm.expect(Response.qa_salary_after_6_months).to.eql(parseInt(Request.salary*2));",
							"});",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Salary = 12 months\", function () {",
							"    pm.expect(Response.qa_salary_after_12_months).to.eql(parseInt(Request.salary*2.7));",
							"});",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Salary = 1.5 year\", function () {",
							"    pm.expect(Response[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(Request.salary*3.3));",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Salary = 3.5 years\", function () {",
							"    pm.expect(Response[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(Request.salary*3.8));",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Parameter person\", function () {",
							"    pm.expect(Response.person.u_name [1]).to.eql(parseInt(Request.salary));",
							"});",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Parameter age\", function () {",
							"    pm.expect(Response.person.u_age).to.eql(parseInt(Request.age));",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Parameter \", function () {",
							"    pm.expect(Response.person.u_salary_5_years).to.eql(parseInt(Request.salary*4.2));",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (let counter1 = 0; counter1 < Response.person.u_name.length; counter1 = counter1 + 1){",
							"    console.log(Response.person.u_name [counter1]);}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}